/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 gameboy_model.glb -t 
*/

import * as THREE from 'three';
import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';
import { OrbitControls } from '@react-three/drei';

type GLTFResult = GLTF & {
  nodes: {
    buttons_Gameboy_0: THREE.Mesh;
    gameboy_Gameboy_0: THREE.Mesh;
  };
  materials: {
    Gameboy: THREE.MeshBasicMaterial;
    ['Gameboy.001']: THREE.MeshBasicMaterial;
  };
  animations: GLTFAction[];
};

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;

export function Gameboy(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('/gameboy_model.glb') as GLTFResult;

  const gameBoyRef = useRef();

  useFrame(() => {
    gameBoyRef.current.rotation.y += 0.01;
  });

  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.001}>
        <group rotation={[Math.PI / 2, 0, 0]} ref={gameBoyRef}>
          <mesh
            geometry={nodes.buttons_Gameboy_0.geometry}
            material={materials.Gameboy}
            position={[-804.48, -701.515, 398.666]}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
          <mesh
            geometry={nodes.gameboy_Gameboy_0.geometry}
            material={materials['Gameboy.001']}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
      <ambientLight />
      <OrbitControls enableZoom={false} />
    </group>
  );
}

useGLTF.preload('/gameboy_model.glb');
